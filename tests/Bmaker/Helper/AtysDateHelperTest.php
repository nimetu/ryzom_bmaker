<?php

namespace Bmaker\Helper;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-20 at 23:08:52.
 */
class AtysDateHelperTest extends \PHPUnit_Framework_TestCase
{
    public function testGetDate()
    {
        $ad = $this->getMockAtysDate()
            ->setMethods(array('toDateString'))
            ->getMock();

        $ad->expects($this->once())
            ->method('toDateString')
            ->will($this->returnValue('-date-'));

        $loader = new AtysDateHelper($ad);
        $this->assertEquals('-date-', $loader->get('atys:date'));
    }

    public function testGetDateTime()
    {
        $ad = $this->getMockAtysDate()
            ->setMethods(array('formatDate'))
            ->getMock();

        $ad->expects($this->once())
            ->method('formatDate')
            ->with($this->equalTo(true))
            ->will($this->returnValue('-date-time-'));

        $loader = new AtysDateHelper($ad);
        $this->assertEquals('-date-time-', $loader->get('atys:datetime'));
    }

    public function testGetTime()
    {
        $ad = $this->getMockAtysDate()
            ->setMethods(array('getHours', 'toTimeString'))
            ->getMock();

        $ad->expects($this->exactly(1))
            ->method('getHours')
            ->will($this->returnValue('-hours-int-'));

        $ad->expects($this->once())
            ->method('toTimeString')
            ->will($this->returnValue('-translated-'));

        $loader = new AtysDateHelper($ad);
        $this->assertEquals('-translated-', $loader->get('atys:time'));
        $this->assertEquals(
            '-hours-int-',
            $loader->get(
                'atys:time',
                array(
                    'translate' => false
                )
            )
        );
    }

    public function testGetYear()
    {
        $ad = $this->getMockAtysDate()
            ->setMethods(array('getYear'))
            ->getMock();

        $ad->expects($this->once())
            ->method('getYear')
            ->will($this->returnValue('-year-'));

        $loader = new AtysDateHelper($ad);
        $this->assertEquals('-year-', $loader->get('atys:year'));
    }

    public function testGetSeason()
    {
        $ad = $this->getMockAtysDate()
            ->setMethods(array('getSeason', 'getSeasonName'))
            ->getMock();

        $ad->expects($this->once())
            ->method('getSeason')
            ->will($this->returnValue('-int-'));

        $ad->expects($this->once())
            ->method('getSeasonName')
            ->will($this->returnValue('-summer-'));

        $loader = new AtysDateHelper($ad);
        $this->assertEquals('-summer-', $loader->get('atys:season'));
        $this->assertEquals(
            '-int-',
            $loader->get(
                'atys:season',
                array(
                    'translate' => false
                )
            )
        );
    }

    public function testGetUnknown()
    {
        $ad = $this->getMockAtysDate()
            ->getMock();
        $loader = new AtysDateHelper($ad);
        $this->assertNull($loader->get('unknown-id'));
    }

    /**
     * @return \PHPUnit_Framework_MockObject_MockBuilder
     */
    private function getMockAtysDate()
    {
        return $this->getMockBuilder('RyzomExtra\AtysDateTime')
            ->disableOriginalConstructor();
    }
}
